***25th April 2024****
Binary Searxg Tree:-creation,level Order TRaversal,inorder,preorder,postorder,
searching ,deletion in BST....
Code Sample


#include<iostream>
#include<queue>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;
    node(int d) {
        this->data = d; // Initialize data member variable
        this->left = NULL;
        this->right = NULL;
    }
};

void inorder(node* root){
    if(root==NULL){
        return ;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right); 
}

void preorder(node* root){
    if(root==NULL){
        return ;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right); 
}
void postorder(node* root){
    if(root==NULL)
    return ;
    postorder(root->left);
postorder(root->right);
cout<<root->data<<" ";
}

void levelOrderTraversal(node* root) {
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while (!q.empty()) {
        node* temp = q.front();
        q.pop();
        if (temp == NULL) {
            cout << endl;
            if (!q.empty()) {
                q.push(NULL);
            }
        }
        else {
            cout << temp->data << " "; // Removed extra space here
            if (temp->left) {
                q.push(temp->left);
            }
            if (temp->right) {
                q.push(temp->right);
            }
        }
    }
}

node* insertIntoBST(node* root, int d) {
    if (root == NULL)
        root = new node(d);
    else if (d > root->data) {
        root->right = insertIntoBST(root->right, d);
    }
    else {
        root->left = insertIntoBST(root->left, d);
    }
    return root; // Moved return statement here
}
node* minVal(node* root){
    node* temp=root;
    if(temp->left!=NULL){
      temp=temp->left; 
    }
    return temp;
}
node* maxVal(node* root){
    node* temp=root;
    if(temp->right!=NULL){
      temp=temp->right; 
    }
    return temp;
}
node* deleteFromBST(node* root,int val){
if(root==NULL){
    return root;
}
if(root->data==val){
    //0 child
if(root->left==NULL && root->right==NULL){
    delete root;
    return NULL;
}
    //1 child
 
 //left part ho
 if(root->left!=NULL && root->right==NULL){
    node* temp=temp->left;
    delete root;
    return temp;
 }
 //right part ho
 if(root->left==NULL && root->right!=NULL){
    node* temp=temp->right;
    delete root;
    return temp;
 }
    //2 child
if(root->left!=NULL && root->right!=NULL){
    int mini=minVal(root->right)->data;
    root->data=mini;
    root->right=deleteFromBST(root->right,mini);
return root;
}

}
else if(root->data > val){
    //left mai jao
    root->left=deleteFromBST(root->left,val);
return root;

}
else{
    root->right=deleteFromBST(root->right,val);
    return root;
}
}
void takeInput(node*& root) {
    int data;
    cin >> data;
    while (data != -1) {
        root = insertIntoBST(root, data);
        cin >> data;
    }
}

int main() {
    node* root = NULL;
    cout << "Enter data to create BST" << endl;
    takeInput(root);
    cout << "Level Order" << endl;
    levelOrderTraversal(root);

    cout << "Inorder Traversal" << endl;
    inorder(root);

    cout << endl << "Preorder Traversal" << endl;
    preorder(root);
cout<<endl<<"postoder Traversal"<<endl;
postorder(root);
cout<<"min value is:"<<minVal(root)->data<<endl;
cout<<"max value:"<<maxVal(root)->data<<endl;

// deletion of node from BST
root=deleteFromBST(root,50);
cout << "Level Order" << endl;
    levelOrderTraversal(root);

    cout << "Inorder Traversal" << endl;
    inorder(root);

    cout << endl << "Preorder Traversal" << endl;
    preorder(root);
cout<<endl<<"postoder Traversal"<<endl;
postorder(root);
cout<<"min value is:"<<minVal(root)->data<<endl;
cout<<"max value:"<<maxVal(root)->data<<endl;
    return 0;
}



Output:
Enter data to create BST
50 20 70 10 30 90 110 -1 
Level Order
50 
20 70 
10 30 90 
110 
Inorder Traversal
10 20 30 50 70 90 110 
Preorder Traversal
50 20 10 30 70 90 110 
postoder Traversal
10 30 20 110 90 70 50 min value is:20
max value:70
Level Order
50 
30 70 
10 90 
110 
Inorder Traversal
10 30 50 70 90 110 
Preorder Traversal
50 30 10 70 90 110 
postoder Traversal
10 30 110 90 70 50 min value is:30
max value:70
PS C:\Users\Mahesh Prasad\OneDrive\Desktop\DSAA> 
